import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM

# Load training dataset
dat_train = pd.read_csv('/filepath/Google_Stock_Price_Train.csv')
plt.plot(dat_train['Open'], label='Training Data')
plt.title('Google Stock Price (Training Data)')
plt.xlabel('Time')
plt.ylabel('Stock Price')
plt.legend()
plt.show()

# Preprocessing training data
training_set = dat_train.iloc[:, 1:2].values
sc = MinMaxScaler(feature_range=(0, 1))
training_set_sc = sc.fit_transform(training_set)

X_train = []
y_train = []
for i in range(60, len(training_set_sc)):
    X_train.append(training_set_sc[i-60:i, 0])
    y_train.append(training_set_sc[i, 0])

X_train, y_train = np.array(X_train), np.array(y_train)
X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))

# Build RNN model
model = Sequential()
model.add(LSTM(units=100, input_shape=(X_train.shape[1], 1)))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the RNN
model.fit(X_train, y_train, epochs=100, batch_size=32)

# Load test dataset
dat_test = pd.read_csv('/filepath/Google_Stock_Price_Test.csv')
real_stock_price = dat_test.iloc[:, 1:2].values

# Preparing test inputs
dat_total = pd.concat((dat_train['Open'], dat_test['Open']), axis=0)
inputs = dat_total[len(dat_total) - len(dat_test) - 60:].values
inputs = inputs.reshape(-1, 1)
inputs_sc = sc.transform(inputs)

X_test = []
for i in range(60, inputs.shape[0]):
    X_test.append(inputs_sc[i-60:i, 0])

X_test = np.array(X_test)
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))

# Make predictions
predicted_stock_price = model.predict(X_test)
predicted_stock_price = sc.inverse_transform(predicted_stock_price)

# Evaluate performance
mse = np.mean((real_stock_price - predicted_stock_price) ** 2)
rmse = np.sqrt(mse)
print(f"Root Mean Squared Error (RMSE): {rmse}")

# Visualize the results
plt.plot(real_stock_price, color='red', label='Real Google Stock Price')
plt.plot(predicted_stock_price, color='blue', label='Forecasted Google Stock Price')
plt.title('Google Stock Price Forecasting Model using RNN')
plt.xlabel('Time')
plt.ylabel('Google Stock Price')
plt.legend()
plt.show()
